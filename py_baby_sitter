#!/usr/bin/env python
# coding=utf-8

import gflags
import re
import os
import simplejson
import smtplib
import subprocess
import sys
import time
from email.mime.text import MIMEText

FLAGS = gflags.FLAGS
gflags.DEFINE_string('command', "", "command to run", short_name="c")
gflags.DEFINE_string('alert_level', "Error:|Warn:", "error level to report", short_name="l")
gflags.DEFINE_string('emails', '', 'Emails to send alerts')
gflags.DEFINE_boolean('save', True, 'Save result in Redis db')

def main():
    try:
        FLAGS(sys.argv)[1:]  # parse flags
    except gflags.FlagsError, exception:
        print '%s\\nUsage: %s ARGS\\n%s' % (exception, sys.argv[0], FLAGS)
        sys.exit(1)

    command_argv = FLAGS.command.split()
    command_argv.append("--stderr")
    binary = command_argv[0]
    success = False
    status_message = ""
    pid = 0

    start_timestamp = time.time()

    (stdoutdata, stderrdata) = ['', '']

    try:
        process = subprocess.Popen(command_argv, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        (stdoutdata, stderrdata) = process.communicate()
        retcode = process.returncode
        pid = process.pid
        if retcode < 0:
            status_message = "%s was terminated by signal %s" % (binary, -retcode)
        elif retcode > 0:
            status_message = "%s exits with status %s" % (binary, retcode)
        else:
            success = True
    except OSError, exception:
        status_message = "%s execution failed: %s" % (binary, exception)
    end_timestamp = time.time()

    if FLAGS.alert_level:
        log_pattern = re.compile("^(%s)|Traceback" % FLAGS.alert_level, re.MULTILINE)
    else:
        log_pattern = re.compile("^Traceback" % FLAGS.alert_level, re.MULTILINE)

    if success and log_pattern.search(stderrdata):
        success = False

    key = 'babysitter:job:%s:%s' % (binary, pid)
    stdoutdata = smartdecode(stdoutdata).encode("utf-8")
    stderrdata = smartdecode(stderrdata).encode("utf-8")
    timestr = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(start_timestamp))
    errfile = os.path.join('timedlog', '.'.join([os.path.basename(FLAGS.command.split()[0]),
                           'stderr', timestr, str(pid)]))
    print >> open(errfile, 'w'), stderrdata

    value = simplejson.dumps({"success": success,
                              "pid": pid,
                              "path": os.getcwd(),
                              "command": FLAGS.command,
                              "status_message" : status_message,
                              "stdoutdata" : stdoutdata,
                              "stderrdata" : os.path.abspath(errfile),
                              "start_time" : start_timestamp,
                              "end_time" : end_timestamp})

    if not success and FLAGS.emails:
        to_address = FLAGS.emails.split(',')
        from_address = 'grp-prd-tech-alert@langtaojin.com'
        #body = 'http://alert.jcndev.com/?c=stdoutdata&id=%s\n\n' % key
        #body += 'http://alert.jcndev.com/?c=stderrdata&id=%s\n\n' % key
        body += 'commands=%s\n\n' % FLAGS.command
        body += ('errfile=%s\n\n' % os.path.abspath(errfile))
        for text in stderrdata.split('\n'):
            if log_pattern.search(text):
                body += text + "\n"
        msg = MIMEText(body)
        msg['Subject'] = 'Job %s error: %s (%s, %s)' % (binary,
                                                        status_message,
                                                        start_timestamp,
                                                        pid)
        msg['From'] = from_address
        msg['To'] = FLAGS.emails
        local_smtp = smtplib.SMTP('localhost')
        local_smtp.sendmail(from_address, to_address, msg.as_string())
        local_smtp.quit()

        now_hour = int(time.strftime("%H", time.localtime()))
        if now_hour > 8 and  now_hour < 22 :
            war = stderrdata.split('\n')[-1]
            if "update_keyword_internal" in FLAGS.command:
                send_message("update_keyword_internal " + war, "13910830934,15010113860")

    if not success:
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == "__main__":
    main()
